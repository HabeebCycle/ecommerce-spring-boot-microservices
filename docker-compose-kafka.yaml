version: '2.1'

services:

  product-service:
    image: habeebcycle/product-service:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network
    depends_on:
      - kafka
      - mongodb

  product-service-p1:
    image: habeebcycle/product-service:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network
    depends_on:
      - kafka
      - mongodb

  recommendation-service:
    image: habeebcycle/recommendation-service:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network
    depends_on:
      - kafka
      - mongodb

  recommendation-service-p1:
    image: habeebcycle/recommendation-service:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network
    depends_on:
      - kafka
      - mongodb

  review-service:
    image: habeebcycle/review-service:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  review-service-p1:
    image: habeebcycle/review-service:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  product-composite-service:
    image: habeebcycle/product-composite-service:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network
    depends_on:
      - kafka

  service-discovery-server:
    image: habeebcycle/service-discovery-server:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network

  service-gateway-server:
    image: habeebcycle/service-gateway-server:v1
    ports:
      - "8443:8443"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network

  service-authorization-server:
    image: habeebcycle/service-authorization-server:v1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - my-network

  service-config-server:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    image: habeebcycle/service-config-server:v1
    networks:
      - my-network

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    ports:
      - "27017:27017"
    networks:
      - my-network
    command: mongod --smallfiles

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    networks:
      - my-network
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 5s
      retries: 10

  # Apache Kafka
  kafka:
    image: wurstmeister/kafka:2.12-2.1.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - my-network
    depends_on:
      - zookeeper

  # zookeeper as service discovery for kafka
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper
    networks:
      - my-network

  #zipkin server
  zipkin:
    image: openzipkin/zipkin:2.12.9
    networks:
      - my-network
    environment:
      - STORAGE_TYPE=mem #Could be: mysql
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # If using mysql as storage type, provide the following
      #- MYSQL_JDBC_URL=mysql  OR  MYSQL_HOST=mysql
      #- MYSQL_USER={username}
      #- MYSQL_PASS={password}
    ports:
      - 9411:9411
    depends_on:
      - kafka


networks:
  my-network:
    name: my-network